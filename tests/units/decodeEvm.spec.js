import { decodePayment } from 'dist/esm'

describe('decodePayment for EVM', () => {

  it("decodes a payment pay(payment) on EVM", ()=> {
    const payment =  decodePayment({
      blockchain: 'polygon',
      address: '0xe04b08Dfc6CaA0F4Ec523a3Ae283Ece7efE00019',
      transaction: '0xcac7130c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000017508f1956a80000000000000000000000000000000000000000000000000000000000000005de200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016e000000000000000000000000000000000000000000000000000001970d6e3d40000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000003c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000008b277154218ccf3380cae48d630da13462e395000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000284ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000241c58db4f00000000000000000000000000000000000000000000000001732c47109514d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104b858183f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f50000000000000000000000000000000000000000000000000000000000000002b0d500b1d8e8ef31e21c99d1db9a6444d3adf12700001f43c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000'
    })

    expect(payment.amount.toString()).toEqual('105000000000000000')
    expect(payment.token).toEqual('0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee')
    expect(payment.receiver).toEqual('0x08b277154218ccf3380cae48d630da13462e3950')
  })

  it("decodes a payment pay(tuple payment,tuple permitTransferFromAndSignature) on EVM", ()=> {
    const payment =  decodePayment({
      blockchain: 'polygon',
      address: '0xe04b08Dfc6CaA0F4Ec523a3Ae283Ece7efE00019',
      transaction: '0x64f0acc4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000277400000000000000000000000000000000000000000000000000000000000026dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097000000000000000000000000000000000000000000000000000001973b875a740000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000000000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000004e260bb2b25ec6f3a59b478fcde5ed5b8d783b02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000002774000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000068406b2b00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000041b2f6bcf8ef010371d2c9ad8462bf0d36f5318a19ebc6e64c1610af44797765b04d1b7a6769996132599ae93a1ee0eaa1ba91125a731acebf545d4f605523ba231b00000000000000000000000000000000000000000000000000000000000000'
    })

    expect(payment.amount.toString()).toEqual('10100')
    expect(payment.token).toEqual('0x2791bca1f2de4661ed88a30c99a7a9449aa84174')
    expect(payment.receiver).toEqual('0x4e260bb2b25ec6f3a59b478fcde5ed5b8d783b02')
  })
})
